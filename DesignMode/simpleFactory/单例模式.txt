单例模式:确保一个类只有一个实例,并要求提供一个全局的访问点.
要点:
(1)构造私有化,确保不能被外界new.
(2)只能通过全局访问点进行访问,以返回单个实例.
单例的好处:
(1)节省内存,因为限制了实例的个数.
(2)有利于垃圾回收.
例子:

"singleton.h"
#pragma once

class SingleTon
{
private:
    SingleTon();
    ~SingleTon();
    static SingleTon* uniqueInstance;
public:
    static SingleTon* getInstance();
};

"singleton.cpp"
#include "singleton.h"
#include <iostream>
using namespace std;

SingleTon::SingleTon()
{

}

SingleTon::~SingleTon()
{
    if(uniqueInstance == NULL)
    {
        return;
    }
    delete uniqueInstance;
    uniqueInstance = 0;
}

SingleTon* SingleTon::getInstance()
{
    if(uniqueInstance == NULL)
        uniqueInstance = new SingleTon;
    return uniqueInstance;
}

"main.cpp"
#include <iostream>

using namespace std;

#include "singleton.h"

SingleTon* SingleTon::uniqueInstance = NULL;

int main(int argc, char *argv[])
{
    SingleTon* single1 = SingleTon::getInstance();
    SingleTon* single2 = SingleTon::getInstance();
    if(single1 == single2)
        cout << "get same singleton" << endl;
    else
        cout << "get no same singleton" << endl;
    return 0;
}